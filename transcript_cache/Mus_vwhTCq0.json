{
  "video_id": "Mus_vwhTCq0",
  "duration": 747.71,
  "full_transcript": [
    {
      "text": "[Music]",
      "start": 0.0,
      "duration": 8.61
    },
    {
      "text": "javascript is a programming language",
      "start": 6.68,
      "duration": 4.629
    },
    {
      "text": "that people love to hate a long time ago",
      "start": 8.61,
      "duration": 4.26
    },
    {
      "text": "developers used to pride themselves on",
      "start": 11.309,
      "duration": 3.45
    },
    {
      "text": "being back in developers because it was",
      "start": 12.87,
      "duration": 4.14
    },
    {
      "text": "more challenging and complex javascript",
      "start": 14.759,
      "duration": 4.231
    },
    {
      "text": "was just a toy for annoying people on",
      "start": 17.01,
      "duration": 6.599
    },
    {
      "text": "websites but it's 2019 and today we have",
      "start": 18.99,
      "duration": 7.23
    },
    {
      "text": "tools like the cloud docker and many API",
      "start": 23.609,
      "duration": 4.5
    },
    {
      "text": "is that abstract way the complexity of",
      "start": 26.22,
      "duration": 3.629
    },
    {
      "text": "back-end development if you're starting",
      "start": 28.109,
      "duration": 3.211
    },
    {
      "text": "up a company today there's a good chance",
      "start": 29.849,
      "duration": 2.52
    },
    {
      "text": "you'll do the majority of your",
      "start": 31.32,
      "duration": 2.7
    },
    {
      "text": "development on the front end with",
      "start": 32.369,
      "duration": 3.241
    },
    {
      "text": "JavaScript so today I want to show you",
      "start": 34.02,
      "duration": 3.39
    },
    {
      "text": "how to write good JavaScript with modern",
      "start": 35.61,
      "duration": 4.14
    },
    {
      "text": "features and avoid bad JavaScript if",
      "start": 37.41,
      "duration": 3.51
    },
    {
      "text": "you're just finding me like and",
      "start": 39.75,
      "duration": 2.579
    },
    {
      "text": "subscribe and if you have your own",
      "start": 40.92,
      "duration": 3.06
    },
    {
      "text": "JavaScript pro tips let me know in the",
      "start": 42.329,
      "duration": 3.541
    },
    {
      "text": "comments one lucky comment will win this",
      "start": 43.98,
      "duration": 3.45
    },
    {
      "text": "one-of-a-kind t-shirt via livestream",
      "start": 45.87,
      "duration": 3.86
    },
    {
      "text": "next week",
      "start": 47.43,
      "duration": 4.469
    },
    {
      "text": "so the first thing you need to know is",
      "start": 49.73,
      "duration": 4.329
    },
    {
      "text": "how to debug your JavaScript like a pro",
      "start": 51.899,
      "duration": 4.23
    },
    {
      "text": "and the way we do that of course is by",
      "start": 54.059,
      "duration": 4.081
    },
    {
      "text": "console logging stuff and I'm saying",
      "start": 56.129,
      "duration": 3.721
    },
    {
      "text": "that with a straight face there are good",
      "start": 58.14,
      "duration": 3.899
    },
    {
      "text": "ways to console log and bad ways let's",
      "start": 59.85,
      "duration": 3.54
    },
    {
      "text": "imagine we have three different objects",
      "start": 62.039,
      "duration": 2.851
    },
    {
      "text": "each one assigned to its own variable",
      "start": 63.39,
      "duration": 3.78
    },
    {
      "text": "the obvious way to log these is just one",
      "start": 64.89,
      "duration": 4.049
    },
    {
      "text": "after the other but the main problem is",
      "start": 67.17,
      "duration": 2.76
    },
    {
      "text": "we don't know the name of the variable",
      "start": 68.939,
      "duration": 2.881
    },
    {
      "text": "when this gets logged but there's a",
      "start": 69.93,
      "duration": 3.36
    },
    {
      "text": "trick we can use here called computed",
      "start": 71.82,
      "duration": 2.7
    },
    {
      "text": "property names where we add the",
      "start": 73.29,
      "duration": 3.3
    },
    {
      "text": "variables to an object not only does",
      "start": 74.52,
      "duration": 3.57
    },
    {
      "text": "this reduce the code footprint but it",
      "start": 76.59,
      "duration": 3.3
    },
    {
      "text": "also tells us exactly which variable",
      "start": 78.09,
      "duration": 3.99
    },
    {
      "text": "define this data one line of code one",
      "start": 79.89,
      "duration": 4.11
    },
    {
      "text": "console log and all the information we",
      "start": 82.08,
      "duration": 3.87
    },
    {
      "text": "need but maybe this data is extra",
      "start": 84.0,
      "duration": 3.299
    },
    {
      "text": "important so we want to make it stand",
      "start": 85.95,
      "duration": 3.809
    },
    {
      "text": "out with some custom CSS styling you can",
      "start": 87.299,
      "duration": 4.771
    },
    {
      "text": "substitute data and also CSS styles by",
      "start": 89.759,
      "duration": 4.051
    },
    {
      "text": "using a percent sign so we'll add",
      "start": 92.07,
      "duration": 3.39
    },
    {
      "text": "percent C and then have the second",
      "start": 93.81,
      "duration": 4.349
    },
    {
      "text": "argument be our actual CSS style and now",
      "start": 95.46,
      "duration": 4.35
    },
    {
      "text": "we get this bold orange color in the",
      "start": 98.159,
      "duration": 3.121
    },
    {
      "text": "console one thing you might have noticed",
      "start": 99.81,
      "duration": 3.269
    },
    {
      "text": "is that the objects all share common",
      "start": 101.28,
      "duration": 3.629
    },
    {
      "text": "properties so maybe we could display",
      "start": 103.079,
      "duration": 3.841
    },
    {
      "text": "those as a table this is really useful",
      "start": 104.909,
      "duration": 3.78
    },
    {
      "text": "when you have an array of objects just",
      "start": 106.92,
      "duration": 4.44
    },
    {
      "text": "do console table with the array I could",
      "start": 108.689,
      "duration": 4.11
    },
    {
      "text": "probably do a whole video on console",
      "start": 111.36,
      "duration": 2.939
    },
    {
      "text": "logging so I'll just show you a couple",
      "start": 112.799,
      "duration": 3.03
    },
    {
      "text": "more things here if you're benchmarking",
      "start": 114.299,
      "duration": 2.881
    },
    {
      "text": "performance you can actually keep track",
      "start": 115.829,
      "duration": 3.75
    },
    {
      "text": "of time in the console will first define",
      "start": 117.18,
      "duration": 4.02
    },
    {
      "text": "our timer and we'll give it a name of",
      "start": 119.579,
      "duration": 3.72
    },
    {
      "text": "looper then we'll set up a while loop",
      "start": 121.2,
      "duration": 3.39
    },
    {
      "text": "and we'll go through a million",
      "start": 123.299,
      "duration": 3.451
    },
    {
      "text": "iterations in that loop when that's done",
      "start": 124.59,
      "duration": 4.529
    },
    {
      "text": "we'll run console time and as you can",
      "start": 126.75,
      "duration": 4.2
    },
    {
      "text": "see here it takes an average of about 4",
      "start": 129.119,
      "duration": 4.021
    },
    {
      "text": "to 5 milliseconds to loop a million",
      "start": 130.95,
      "duration": 2.58
    },
    {
      "text": "times",
      "start": 133.14,
      "duration": 2.31
    },
    {
      "text": "keeping track of time is great but what",
      "start": 133.53,
      "duration": 3.33
    },
    {
      "text": "if you need to know where a console.log",
      "start": 135.45,
      "duration": 3.48
    },
    {
      "text": "originated from let's imagine we have a",
      "start": 136.86,
      "duration": 3.9
    },
    {
      "text": "really important function that deletes",
      "start": 138.93,
      "duration": 3.51
    },
    {
      "text": "items from our database and we want to",
      "start": 140.76,
      "duration": 2.82
    },
    {
      "text": "make sure that we don't accidentally",
      "start": 142.44,
      "duration": 3.3
    },
    {
      "text": "call this method twice you can add a",
      "start": 143.58,
      "duration": 3.989
    },
    {
      "text": "console trace to your function and it",
      "start": 145.74,
      "duration": 3.45
    },
    {
      "text": "will give you a stack trace for where it",
      "start": 147.569,
      "duration": 4.291
    },
    {
      "text": "was called and what defined it if we run",
      "start": 149.19,
      "duration": 4.019
    },
    {
      "text": "this code we'll get a console log that",
      "start": 151.86,
      "duration": 2.94
    },
    {
      "text": "tells us the function was defined on",
      "start": 153.209,
      "duration": 4.411
    },
    {
      "text": "line 35 and then called on lines 37 and",
      "start": 154.8,
      "duration": 6.21
    },
    {
      "text": "38 so now that you're a debugging expert",
      "start": 157.62,
      "duration": 4.47
    },
    {
      "text": "I'm going to show you a few different",
      "start": 161.01,
      "duration": 2.76
    },
    {
      "text": "ways you can make your code as concise",
      "start": 162.09,
      "duration": 3.96
    },
    {
      "text": "and efficient as possible let's imagine",
      "start": 163.77,
      "duration": 4.05
    },
    {
      "text": "we have an object with some animal data",
      "start": 166.05,
      "duration": 3.57
    },
    {
      "text": "and we need a function that will tell us",
      "start": 167.82,
      "duration": 4.68
    },
    {
      "text": "how to feed the animal this is just a",
      "start": 169.62,
      "duration": 5.13
    },
    {
      "text": "function that returns a string so inside",
      "start": 172.5,
      "duration": 3.84
    },
    {
      "text": "that string will interpolate a few",
      "start": 174.75,
      "duration": 4.14
    },
    {
      "text": "values from that object this doesn't",
      "start": 176.34,
      "duration": 3.99
    },
    {
      "text": "look too bad but you'll notice that",
      "start": 178.89,
      "duration": 3.33
    },
    {
      "text": "we're repeating the word animal over and",
      "start": 180.33,
      "duration": 4.02
    },
    {
      "text": "over again there's a technique called",
      "start": 182.22,
      "duration": 3.96
    },
    {
      "text": "object D structuring that we can use to",
      "start": 184.35,
      "duration": 4.169
    },
    {
      "text": "eliminate most of the repetition here if",
      "start": 186.18,
      "duration": 3.72
    },
    {
      "text": "we have a function that takes an object",
      "start": 188.519,
      "duration": 3.601
    },
    {
      "text": "but we only need to use a handful of its",
      "start": 189.9,
      "duration": 4.47
    },
    {
      "text": "properties we can D structure those in",
      "start": 192.12,
      "duration": 4.53
    },
    {
      "text": "the argument itself we just wrap it in",
      "start": 194.37,
      "duration": 4.38
    },
    {
      "text": "brackets and then pass in the names of",
      "start": 196.65,
      "duration": 3.72
    },
    {
      "text": "the object properties that we want to",
      "start": 198.75,
      "duration": 4.5
    },
    {
      "text": "use so now we can format the same string",
      "start": 200.37,
      "duration": 4.5
    },
    {
      "text": "but we never actually have to use the",
      "start": 203.25,
      "duration": 3.75
    },
    {
      "text": "word animal directly this might seem",
      "start": 204.87,
      "duration": 3.63
    },
    {
      "text": "like a modest gain on this simple",
      "start": 207.0,
      "duration": 3.57
    },
    {
      "text": "function but when you have a big object",
      "start": 208.5,
      "duration": 3.66
    },
    {
      "text": "with a lot of properties this can make a",
      "start": 210.57,
      "duration": 3.63
    },
    {
      "text": "huge difference and I completely",
      "start": 212.16,
      "duration": 3.51
    },
    {
      "text": "understand that some people don't like",
      "start": 214.2,
      "duration": 3.3
    },
    {
      "text": "that bracket syntax in the object",
      "start": 215.67,
      "duration": 3.45
    },
    {
      "text": "argument so there's actually another way",
      "start": 217.5,
      "duration": 3.299
    },
    {
      "text": "we can do this which is just as good",
      "start": 219.12,
      "duration": 3.869
    },
    {
      "text": "this time we pass in the animal object",
      "start": 220.799,
      "duration": 4.051
    },
    {
      "text": "like we did originally but then we set",
      "start": 222.989,
      "duration": 3.72
    },
    {
      "text": "up a variable that has the names of the",
      "start": 224.85,
      "duration": 4.05
    },
    {
      "text": "properties in that object set equal to",
      "start": 226.709,
      "duration": 4.081
    },
    {
      "text": "the object and now we can use those",
      "start": 228.9,
      "duration": 3.72
    },
    {
      "text": "properties like variables throughout the",
      "start": 230.79,
      "duration": 3.63
    },
    {
      "text": "function and this tends to be the better",
      "start": 232.62,
      "duration": 3.63
    },
    {
      "text": "way to go if you have multiple objects",
      "start": 234.42,
      "duration": 4.409
    },
    {
      "text": "2d structure and a single function the",
      "start": 236.25,
      "duration": 4.049
    },
    {
      "text": "next thing we'll look at is template",
      "start": 238.829,
      "duration": 2.88
    },
    {
      "text": "literals which we've already been using",
      "start": 240.299,
      "duration": 3.361
    },
    {
      "text": "in the code but there's more to talk",
      "start": 241.709,
      "duration": 3.511
    },
    {
      "text": "about here when I first started",
      "start": 243.66,
      "duration": 2.82
    },
    {
      "text": "programming about 10 years ago",
      "start": 245.22,
      "duration": 2.97
    },
    {
      "text": "jQuery was the cool thing in JavaScript",
      "start": 246.48,
      "duration": 4.319
    },
    {
      "text": "kind of like react is today but",
      "start": 248.19,
      "duration": 4.169
    },
    {
      "text": "unfortunately it didn't have all of the",
      "start": 250.799,
      "duration": 2.671
    },
    {
      "text": "awesome things that we have in",
      "start": 252.359,
      "duration": 3.301
    },
    {
      "text": "JavaScript now for example you would see",
      "start": 253.47,
      "duration": 4.23
    },
    {
      "text": "a lot of string concatenation that looks",
      "start": 255.66,
      "duration": 4.139
    },
    {
      "text": "like this where you have a variable plus",
      "start": 257.7,
      "duration": 3.839
    },
    {
      "text": "a string and you have to manage the",
      "start": 259.799,
      "duration": 4.11
    },
    {
      "text": "spaces in between plus an expression",
      "start": 261.539,
      "duration": 4.531
    },
    {
      "text": "plus a whole bunch of other stuff this",
      "start": 263.909,
      "duration": 3.091
    },
    {
      "text": "type of code is",
      "start": 266.07,
      "duration": 2.49
    },
    {
      "text": "incredibly annoying to deal with but",
      "start": 267.0,
      "duration": 3.21
    },
    {
      "text": "template literals in modern JavaScript",
      "start": 268.56,
      "duration": 3.42
    },
    {
      "text": "solve this problem completely",
      "start": 270.21,
      "duration": 3.99
    },
    {
      "text": "instead of concatenating values together",
      "start": 271.98,
      "duration": 3.93
    },
    {
      "text": "we can actually interpolate them",
      "start": 274.2,
      "duration": 3.87
    },
    {
      "text": "directly into the string you can do this",
      "start": 275.91,
      "duration": 3.87
    },
    {
      "text": "by defining your string with backticks",
      "start": 278.07,
      "duration": 4.08
    },
    {
      "text": "and then use dollar sign brackets and",
      "start": 279.78,
      "duration": 4.47
    },
    {
      "text": "then whatever variable or expression you",
      "start": 282.15,
      "duration": 4.17
    },
    {
      "text": "want inside up there so we'll go ahead",
      "start": 284.25,
      "duration": 3.51
    },
    {
      "text": "and grab the properties we need with",
      "start": 286.32,
      "duration": 3.09
    },
    {
      "text": "object D structuring that we learned",
      "start": 287.76,
      "duration": 2.4
    },
    {
      "text": "just a minute ago",
      "start": 289.41,
      "duration": 2.61
    },
    {
      "text": "and then we'll interpolate those into",
      "start": 290.16,
      "duration": 3.54
    },
    {
      "text": "the string itself which is a lot more",
      "start": 292.02,
      "duration": 3.35
    },
    {
      "text": "readable and a lot easier to maintain",
      "start": 293.7,
      "duration": 3.66
    },
    {
      "text": "but you can actually take things a step",
      "start": 295.37,
      "duration": 4.299
    },
    {
      "text": "further and build strings in a purely",
      "start": 297.36,
      "duration": 4.77
    },
    {
      "text": "functional way so we'll write a function",
      "start": 299.669,
      "duration": 4.561
    },
    {
      "text": "here called horse age that takes in",
      "start": 302.13,
      "duration": 3.72
    },
    {
      "text": "array of strings as the first argument",
      "start": 304.23,
      "duration": 3.39
    },
    {
      "text": "and then it can take whatever other",
      "start": 305.85,
      "duration": 3.99
    },
    {
      "text": "arguments that wants after that we can",
      "start": 307.62,
      "duration": 3.36
    },
    {
      "text": "look at the arguments to this function",
      "start": 309.84,
      "duration": 4.62
    },
    {
      "text": "and use them to compose a string so here",
      "start": 310.98,
      "duration": 4.74
    },
    {
      "text": "we're going to look at the age of the",
      "start": 314.46,
      "duration": 3.06
    },
    {
      "text": "animal and if it's older than five we'll",
      "start": 315.72,
      "duration": 3.449
    },
    {
      "text": "say it's old otherwise we'll say it's",
      "start": 317.52,
      "duration": 3.57
    },
    {
      "text": "young and the last thing we'll do is",
      "start": 319.169,
      "duration": 3.841
    },
    {
      "text": "return the actual value of the string",
      "start": 321.09,
      "duration": 3.57
    },
    {
      "text": "that's a pretty standard looking",
      "start": 323.01,
      "duration": 3.84
    },
    {
      "text": "function but the interesting thing here",
      "start": 324.66,
      "duration": 4.02
    },
    {
      "text": "is that instead of passing a regular",
      "start": 326.85,
      "duration": 3.42
    },
    {
      "text": "argument to this function we can",
      "start": 328.68,
      "duration": 3.57
    },
    {
      "text": "actually just attach it to a template",
      "start": 330.27,
      "duration": 3.99
    },
    {
      "text": "literal and it will parse the arguments",
      "start": 332.25,
      "duration": 3.84
    },
    {
      "text": "in it this might seem kind of weird at",
      "start": 334.26,
      "duration": 3.63
    },
    {
      "text": "first but instead of doing parentheses",
      "start": 336.09,
      "duration": 3.78
    },
    {
      "text": "with the arguments we'll just attach our",
      "start": 337.89,
      "duration": 4.17
    },
    {
      "text": "template literal and it will parse all",
      "start": 339.87,
      "duration": 4.23
    },
    {
      "text": "of the string segments as an array of",
      "start": 342.06,
      "duration": 3.9
    },
    {
      "text": "strings as the first argument to the",
      "start": 344.1,
      "duration": 3.69
    },
    {
      "text": "function that we defined then it will",
      "start": 345.96,
      "duration": 3.54
    },
    {
      "text": "handle all the other arguments in the",
      "start": 347.79,
      "duration": 3.48
    },
    {
      "text": "order in which they appear inside of the",
      "start": 349.5,
      "duration": 4.169
    },
    {
      "text": "dollar sign brackets in other words you",
      "start": 351.27,
      "duration": 4.56
    },
    {
      "text": "can take a single argument and use it to",
      "start": 353.669,
      "duration": 4.141
    },
    {
      "text": "compose multiple values in the return",
      "start": 355.83,
      "duration": 3.66
    },
    {
      "text": "string this can be a very powerful",
      "start": 357.81,
      "duration": 4.05
    },
    {
      "text": "concept for templating and it's actually",
      "start": 359.49,
      "duration": 4.41
    },
    {
      "text": "used in the polymer project now via a",
      "start": 361.86,
      "duration": 6.18
    },
    {
      "text": "library called lit HTML so now that we",
      "start": 363.9,
      "duration": 5.25
    },
    {
      "text": "know how to work with strings we're",
      "start": 368.04,
      "duration": 3.15
    },
    {
      "text": "going to move on to the spread syntax to",
      "start": 369.15,
      "duration": 4.8
    },
    {
      "text": "work with objects and arrays let's",
      "start": 371.19,
      "duration": 4.8
    },
    {
      "text": "imagine we have one object for a Pokemon",
      "start": 373.95,
      "duration": 3.93
    },
    {
      "text": "and the other one for the stats that",
      "start": 375.99,
      "duration": 4.47
    },
    {
      "text": "define its various attributes let's say",
      "start": 377.88,
      "duration": 4.08
    },
    {
      "text": "we want to assign the properties from",
      "start": 380.46,
      "duration": 3.84
    },
    {
      "text": "the stats object to the Pikachu object",
      "start": 381.96,
      "duration": 4.98
    },
    {
      "text": "one way to do that is to just redefine",
      "start": 384.3,
      "duration": 4.92
    },
    {
      "text": "them one by one on the original Pikachu",
      "start": 386.94,
      "duration": 4.89
    },
    {
      "text": "object for one this is just really ugly",
      "start": 389.22,
      "duration": 5.07
    },
    {
      "text": "and verbose but we're also mutating the",
      "start": 391.83,
      "duration": 4.74
    },
    {
      "text": "original object when we most likely want",
      "start": 394.29,
      "duration": 5.37
    },
    {
      "text": "to create a new immutable object because",
      "start": 396.57,
      "duration": 4.33
    },
    {
      "text": "let's say that our Pokemon",
      "start": 399.66,
      "duration": 3.25
    },
    {
      "text": "levels up over time we want to represent",
      "start": 400.9,
      "duration": 5.13
    },
    {
      "text": "each level up as its own object we could",
      "start": 402.91,
      "duration": 5.16
    },
    {
      "text": "use object to sign here and take the",
      "start": 406.03,
      "duration": 3.9
    },
    {
      "text": "original object and merge it in with the",
      "start": 408.07,
      "duration": 3.719
    },
    {
      "text": "stats and this will merge them together",
      "start": 409.93,
      "duration": 4.47
    },
    {
      "text": "from left to right or if we just wanted",
      "start": 411.789,
      "duration": 4.47
    },
    {
      "text": "to update a single property we could add",
      "start": 414.4,
      "duration": 4.62
    },
    {
      "text": "an object with that property in it this",
      "start": 416.259,
      "duration": 4.5
    },
    {
      "text": "isn't too bad but there's a more concise",
      "start": 419.02,
      "duration": 4.59
    },
    {
      "text": "way to do this with the spread syntax by",
      "start": 420.759,
      "duration": 4.891
    },
    {
      "text": "creating a new object and placing our",
      "start": 423.61,
      "duration": 3.809
    },
    {
      "text": "existing objects in it with three dots",
      "start": 425.65,
      "duration": 3.57
    },
    {
      "text": "in front of them it will compose a new",
      "start": 427.419,
      "duration": 4.021
    },
    {
      "text": "object from left to right so the",
      "start": 429.22,
      "duration": 3.84
    },
    {
      "text": "property is farthest to the right will",
      "start": 431.44,
      "duration": 3.99
    },
    {
      "text": "have the priority again this is mostly",
      "start": 433.06,
      "duration": 4.41
    },
    {
      "text": "just syntactic sugar and it just makes",
      "start": 435.43,
      "duration": 3.84
    },
    {
      "text": "your code more readable and easier to",
      "start": 437.47,
      "duration": 4.02
    },
    {
      "text": "maintain and it's also possible to use",
      "start": 439.27,
      "duration": 4.53
    },
    {
      "text": "the spread syntax on arrays so let's",
      "start": 441.49,
      "duration": 3.899
    },
    {
      "text": "imagine we have an array of strings and",
      "start": 443.8,
      "duration": 3.81
    },
    {
      "text": "we need to push additional items to this",
      "start": 445.389,
      "duration": 4.351
    },
    {
      "text": "array the old-school way to do this",
      "start": 447.61,
      "duration": 3.809
    },
    {
      "text": "would be to just push new items to the",
      "start": 449.74,
      "duration": 4.049
    },
    {
      "text": "array one by one but in today's world we",
      "start": 451.419,
      "duration": 3.841
    },
    {
      "text": "can reduce these three lines of code to",
      "start": 453.789,
      "duration": 3.511
    },
    {
      "text": "just one by defining an array with the",
      "start": 455.26,
      "duration": 4.439
    },
    {
      "text": "new items and in the spread syntax on",
      "start": 457.3,
      "duration": 5.07
    },
    {
      "text": "the original array if we add the three",
      "start": 459.699,
      "duration": 4.111
    },
    {
      "text": "dots to the beginning then it's the",
      "start": 462.37,
      "duration": 3.269
    },
    {
      "text": "equivalent of doing an array push",
      "start": 463.81,
      "duration": 4.229
    },
    {
      "text": "because it will append the new items to",
      "start": 465.639,
      "duration": 3.991
    },
    {
      "text": "the end of the array but the nice thing",
      "start": 468.039,
      "duration": 3.361
    },
    {
      "text": "is we could just add this to the end of",
      "start": 469.63,
      "duration": 2.88
    },
    {
      "text": "the array and then we have the",
      "start": 471.4,
      "duration": 3.69
    },
    {
      "text": "equivalent of a race shift and we might",
      "start": 472.51,
      "duration": 4.35
    },
    {
      "text": "even take the original values and just",
      "start": 475.09,
      "duration": 3.21
    },
    {
      "text": "splice them in the middle of the array",
      "start": 476.86,
      "duration": 4.17
    },
    {
      "text": "giving us even more flexibility and this",
      "start": 478.3,
      "duration": 4.41
    },
    {
      "text": "code brings back some memories you see",
      "start": 481.03,
      "duration": 3.48
    },
    {
      "text": "this little trailing comma here this",
      "start": 482.71,
      "duration": 3.12
    },
    {
      "text": "used to be the kind of thing that would",
      "start": 484.51,
      "duration": 3.42
    },
    {
      "text": "break an entire JavaScript program and",
      "start": 485.83,
      "duration": 4.41
    },
    {
      "text": "be really difficult to figure out but",
      "start": 487.93,
      "duration": 4.26
    },
    {
      "text": "luckily in modern JavaScript it just",
      "start": 490.24,
      "duration": 3.149
    },
    {
      "text": "works and it's actually kind of",
      "start": 492.19,
      "duration": 2.789
    },
    {
      "text": "considered a good practice because you",
      "start": 493.389,
      "duration": 3.301
    },
    {
      "text": "can reduce the number of lines that",
      "start": 494.979,
      "duration": 4.711
    },
    {
      "text": "change when you do get commits now it's",
      "start": 496.69,
      "duration": 4.949
    },
    {
      "text": "time to move on to loops let's imagine",
      "start": 499.69,
      "duration": 3.87
    },
    {
      "text": "we have an array of numbers here that",
      "start": 501.639,
      "duration": 3.871
    },
    {
      "text": "represent the order totals that we've",
      "start": 503.56,
      "duration": 3.51
    },
    {
      "text": "had throughout the day in our app now",
      "start": 505.51,
      "duration": 3.81
    },
    {
      "text": "let's say we need to compute some values",
      "start": 507.07,
      "duration": 4.14
    },
    {
      "text": "based on this array such as the order",
      "start": 509.32,
      "duration": 4.08
    },
    {
      "text": "total maybe we need to add some tax to",
      "start": 511.21,
      "duration": 4.259
    },
    {
      "text": "each one and filter out the high value",
      "start": 513.4,
      "duration": 4.41
    },
    {
      "text": "orders to be reviewed by a manager one",
      "start": 515.469,
      "duration": 4.411
    },
    {
      "text": "option is to just use a classic for loop",
      "start": 517.81,
      "duration": 3.45
    },
    {
      "text": "like you'll find in pretty much every",
      "start": 519.88,
      "duration": 3.48
    },
    {
      "text": "programming language we have an integer",
      "start": 521.26,
      "duration": 3.99
    },
    {
      "text": "that starts at zero while that integer",
      "start": 523.36,
      "duration": 3.9
    },
    {
      "text": "is less than the orders length we will",
      "start": 525.25,
      "duration": 3.24
    },
    {
      "text": "increment it by one",
      "start": 527.26,
      "duration": 3.18
    },
    {
      "text": "personally I hate loops that look like",
      "start": 528.49,
      "duration": 3.63
    },
    {
      "text": "this and I almost never use them in",
      "start": 530.44,
      "duration": 3.48
    },
    {
      "text": "JavaScript but while we're in the loop",
      "start": 532.12,
      "duration": 2.73
    },
    {
      "text": "we can start computing",
      "start": 533.92,
      "duration": 3.089
    },
    {
      "text": "values for the total we will just do",
      "start": 534.85,
      "duration": 4.95
    },
    {
      "text": "plus equals with the order total then to",
      "start": 537.009,
      "duration": 5.101
    },
    {
      "text": "create a new array with the tax added to",
      "start": 539.8,
      "duration": 4.019
    },
    {
      "text": "it we'll go ahead and take the order",
      "start": 542.11,
      "duration": 4.469
    },
    {
      "text": "amount and multiply it by 1.1 to add 10%",
      "start": 543.819,
      "duration": 5.401
    },
    {
      "text": "tax then if we have order values that",
      "start": 546.579,
      "duration": 4.531
    },
    {
      "text": "are greater than 100 we'll go ahead and",
      "start": 549.22,
      "duration": 4.169
    },
    {
      "text": "add those to the high value order array",
      "start": 551.11,
      "duration": 5.52
    },
    {
      "text": "this code is a very ugly and B it's",
      "start": 553.389,
      "duration": 5.13
    },
    {
      "text": "mutating values that might make our code",
      "start": 556.63,
      "duration": 4.319
    },
    {
      "text": "a little more unpredictable luckily we",
      "start": 558.519,
      "duration": 3.81
    },
    {
      "text": "can reduce this down to just three lines",
      "start": 560.949,
      "duration": 3.57
    },
    {
      "text": "of code by using modern JavaScript array",
      "start": 562.329,
      "duration": 4.5
    },
    {
      "text": "methods if we want to take an array and",
      "start": 564.519,
      "duration": 4.26
    },
    {
      "text": "then have it accumulate to a value that",
      "start": 566.829,
      "duration": 4.26
    },
    {
      "text": "equals say a total amount we can use",
      "start": 568.779,
      "duration": 5.101
    },
    {
      "text": "array reduce it takes a callback",
      "start": 571.089,
      "duration": 4.771
    },
    {
      "text": "function as the argument where the first",
      "start": 573.88,
      "duration": 4.11
    },
    {
      "text": "argument is the accumulated value and",
      "start": 575.86,
      "duration": 4.289
    },
    {
      "text": "the second argument is the current value",
      "start": 577.99,
      "duration": 4.469
    },
    {
      "text": "in the loop so if we want to sum up all",
      "start": 580.149,
      "duration": 3.87
    },
    {
      "text": "of the items in the array we can just do",
      "start": 582.459,
      "duration": 3.391
    },
    {
      "text": "the accumulated values plus the current",
      "start": 584.019,
      "duration": 3.87
    },
    {
      "text": "value and when the loop finishes that",
      "start": 585.85,
      "duration": 3.87
    },
    {
      "text": "will give us the total of all elements",
      "start": 587.889,
      "duration": 4.291
    },
    {
      "text": "in that array mapping and filtering",
      "start": 589.72,
      "duration": 4.89
    },
    {
      "text": "values is even easier if we want to add",
      "start": 592.18,
      "duration": 4.68
    },
    {
      "text": "tax to all the items in the array we can",
      "start": 594.61,
      "duration": 4.11
    },
    {
      "text": "just take the values in the array then",
      "start": 596.86,
      "duration": 4.56
    },
    {
      "text": "map them to their value times 1.1 and",
      "start": 598.72,
      "duration": 5.039
    },
    {
      "text": "lastly we can use filter to create an",
      "start": 601.42,
      "duration": 4.14
    },
    {
      "text": "array that only has the values greater",
      "start": 603.759,
      "duration": 4.531
    },
    {
      "text": "than 100 in it whenever the callback",
      "start": 605.56,
      "duration": 5.07
    },
    {
      "text": "function equals true it's going to allow",
      "start": 608.29,
      "duration": 4.229
    },
    {
      "text": "a value through so in other words if the",
      "start": 610.63,
      "duration": 3.959
    },
    {
      "text": "value is greater than 100 it will allow",
      "start": 612.519,
      "duration": 4.94
    },
    {
      "text": "that value through to the new array I",
      "start": 614.589,
      "duration": 5.461
    },
    {
      "text": "wanted to save the best for last and",
      "start": 617.459,
      "duration": 5.62
    },
    {
      "text": "that of course is async/await let's",
      "start": 620.05,
      "duration": 4.56
    },
    {
      "text": "create a method called random that",
      "start": 623.079,
      "duration": 3.51
    },
    {
      "text": "returns a promise that resolves to a",
      "start": 624.61,
      "duration": 4.409
    },
    {
      "text": "random number asynchronously now let's",
      "start": 626.589,
      "duration": 4.23
    },
    {
      "text": "imagine that we want to retrieve three",
      "start": 629.019,
      "duration": 3.841
    },
    {
      "text": "different asynchronous numbers one after",
      "start": 630.819,
      "duration": 3.541
    },
    {
      "text": "the other and then add them all together",
      "start": 632.86,
      "duration": 3.599
    },
    {
      "text": "at the end that might seem like a silly",
      "start": 634.36,
      "duration": 3.899
    },
    {
      "text": "example but that's actually how things",
      "start": 636.459,
      "duration": 3.331
    },
    {
      "text": "work a lot of times in the real world",
      "start": 638.259,
      "duration": 3.211
    },
    {
      "text": "when you have to retrieve one item from",
      "start": 639.79,
      "duration": 3.659
    },
    {
      "text": "the database get some data retrieving",
      "start": 641.47,
      "duration": 4.739
    },
    {
      "text": "another item from an API and so on with",
      "start": 643.449,
      "duration": 4.5
    },
    {
      "text": "promises you wait for an asynchronous",
      "start": 646.209,
      "duration": 3.841
    },
    {
      "text": "value to resolve and then you handle it",
      "start": 647.949,
      "duration": 4.021
    },
    {
      "text": "with a callback function inside of then",
      "start": 650.05,
      "duration": 4.2
    },
    {
      "text": "once you have your data you can return",
      "start": 651.97,
      "duration": 4.229
    },
    {
      "text": "another promise and then chain another",
      "start": 654.25,
      "duration": 4.019
    },
    {
      "text": "then call back to it and continue this",
      "start": 656.199,
      "duration": 4.08
    },
    {
      "text": "pattern on for as long as you need to",
      "start": 658.269,
      "duration": 3.661
    },
    {
      "text": "you end up with this ridiculous looking",
      "start": 660.279,
      "duration": 3.621
    },
    {
      "text": "code where you keep saying and then",
      "start": 661.93,
      "duration": 9.71
    },
    {
      "text": "and then and then but fortunately",
      "start": 663.9,
      "duration": 9.33
    },
    {
      "text": "there's a really nice solution to this",
      "start": 671.64,
      "duration": 3.08
    },
    {
      "text": "which is async/await",
      "start": 673.23,
      "duration": 4.08
    },
    {
      "text": "basically it allows us to express a",
      "start": 674.72,
      "duration": 6.07
    },
    {
      "text": "singer s code in a synchronous format we",
      "start": 677.31,
      "duration": 4.86
    },
    {
      "text": "can come down here and rewrite our",
      "start": 680.79,
      "duration": 3.15
    },
    {
      "text": "promise chain the only difference is",
      "start": 682.17,
      "duration": 3.54
    },
    {
      "text": "adding async in front of the function",
      "start": 683.94,
      "duration": 4.28
    },
    {
      "text": "which will force it to return a promise",
      "start": 685.71,
      "duration": 5.1
    },
    {
      "text": "but the real benefit here is that we can",
      "start": 688.22,
      "duration": 4.3
    },
    {
      "text": "use a weight in front of our promises",
      "start": 690.81,
      "duration": 3.78
    },
    {
      "text": "and have them resolve to an actual",
      "start": 692.52,
      "duration": 5.07
    },
    {
      "text": "variable value so instead of using those",
      "start": 694.59,
      "duration": 4.92
    },
    {
      "text": "then callbacks we can just say Const",
      "start": 697.59,
      "duration": 4.56
    },
    {
      "text": "first equals await random and do the",
      "start": 699.51,
      "duration": 3.99
    },
    {
      "text": "same thing for the second and third",
      "start": 702.15,
      "duration": 4.5
    },
    {
      "text": "number and now it's much easier to read",
      "start": 703.5,
      "duration": 4.71
    },
    {
      "text": "and understand this code because we can",
      "start": 706.65,
      "duration": 3.27
    },
    {
      "text": "just go line by line and see that we're",
      "start": 708.21,
      "duration": 3.24
    },
    {
      "text": "waiting one number awaiting another",
      "start": 709.92,
      "duration": 2.79
    },
    {
      "text": "number and so on",
      "start": 711.45,
      "duration": 3.57
    },
    {
      "text": "a sync wait is one of the most awesome",
      "start": 712.71,
      "duration": 4.41
    },
    {
      "text": "things to ever happen to JavaScript and",
      "start": 715.02,
      "duration": 4.41
    },
    {
      "text": "it really deserves its own video right",
      "start": 717.12,
      "duration": 3.75
    },
    {
      "text": "now we're out of time but in the future",
      "start": 719.43,
      "duration": 2.4
    },
    {
      "text": "I'll show you some of the cool things",
      "start": 720.87,
      "duration": 2.49
    },
    {
      "text": "you can do with it like use it in",
      "start": 721.83,
      "duration": 3.63
    },
    {
      "text": "conditional statements or use it in for",
      "start": 723.36,
      "duration": 4.05
    },
    {
      "text": "loops and things like that I'm gonna go",
      "start": 725.46,
      "duration": 3.36
    },
    {
      "text": "ahead and wrap things up there if this",
      "start": 727.41,
      "duration": 2.73
    },
    {
      "text": "video helped you please like and",
      "start": 728.82,
      "duration": 3.03
    },
    {
      "text": "subscribe and make sure to check out the",
      "start": 730.14,
      "duration": 3.21
    },
    {
      "text": "livestream next week to see if you want",
      "start": 731.85,
      "duration": 3.24
    },
    {
      "text": "some free swag and if you're serious",
      "start": 733.35,
      "duration": 3.42
    },
    {
      "text": "about building apps consider becoming a",
      "start": 735.09,
      "duration": 3.78
    },
    {
      "text": "pro member at angular firebase comm",
      "start": 736.77,
      "duration": 3.69
    },
    {
      "text": "you'll get all kinds of exclusive",
      "start": 738.87,
      "duration": 3.45
    },
    {
      "text": "content designed to help you build and",
      "start": 740.46,
      "duration": 4.05
    },
    {
      "text": "ship your app faster thanks for watching",
      "start": 742.32,
      "duration": 5.39
    },
    {
      "text": "and I'll talk to you soon",
      "start": 744.51,
      "duration": 3.2
    }
  ],
  "intro": [
    {
      "text": "[Music]",
      "start": 0.0,
      "duration": 8.61
    },
    {
      "text": "javascript is a programming language",
      "start": 6.68,
      "duration": 4.629
    },
    {
      "text": "that people love to hate a long time ago",
      "start": 8.61,
      "duration": 4.26
    },
    {
      "text": "developers used to pride themselves on",
      "start": 11.309,
      "duration": 3.45
    },
    {
      "text": "being back in developers because it was",
      "start": 12.87,
      "duration": 4.14
    },
    {
      "text": "more challenging and complex javascript",
      "start": 14.759,
      "duration": 4.231
    },
    {
      "text": "was just a toy for annoying people on",
      "start": 17.01,
      "duration": 6.599
    },
    {
      "text": "websites but it's 2019 and today we have",
      "start": 18.99,
      "duration": 7.23
    },
    {
      "text": "tools like the cloud docker and many API",
      "start": 23.609,
      "duration": 4.5
    },
    {
      "text": "is that abstract way the complexity of",
      "start": 26.22,
      "duration": 3.629
    },
    {
      "text": "back-end development if you're starting",
      "start": 28.109,
      "duration": 3.211
    },
    {
      "text": "up a company today there's a good chance",
      "start": 29.849,
      "duration": 2.52
    },
    {
      "text": "you'll do the majority of your",
      "start": 31.32,
      "duration": 2.7
    },
    {
      "text": "development on the front end with",
      "start": 32.369,
      "duration": 3.241
    },
    {
      "text": "JavaScript so today I want to show you",
      "start": 34.02,
      "duration": 3.39
    },
    {
      "text": "how to write good JavaScript with modern",
      "start": 35.61,
      "duration": 4.14
    },
    {
      "text": "features and avoid bad JavaScript if",
      "start": 37.41,
      "duration": 3.51
    },
    {
      "text": "you're just finding me like and",
      "start": 39.75,
      "duration": 2.579
    },
    {
      "text": "subscribe and if you have your own",
      "start": 40.92,
      "duration": 3.06
    },
    {
      "text": "JavaScript pro tips let me know in the",
      "start": 42.329,
      "duration": 3.541
    },
    {
      "text": "comments one lucky comment will win this",
      "start": 43.98,
      "duration": 3.45
    },
    {
      "text": "one-of-a-kind t-shirt via livestream",
      "start": 45.87,
      "duration": 3.86
    },
    {
      "text": "next week",
      "start": 47.43,
      "duration": 4.469
    },
    {
      "text": "so the first thing you need to know is",
      "start": 49.73,
      "duration": 4.329
    },
    {
      "text": "how to debug your JavaScript like a pro",
      "start": 51.899,
      "duration": 4.23
    },
    {
      "text": "and the way we do that of course is by",
      "start": 54.059,
      "duration": 4.081
    },
    {
      "text": "console logging stuff and I'm saying",
      "start": 56.129,
      "duration": 3.721
    },
    {
      "text": "that with a straight face there are good",
      "start": 58.14,
      "duration": 3.899
    },
    {
      "text": "ways to console log and bad ways let's",
      "start": 59.85,
      "duration": 3.54
    }
  ],
  "outro": [
    {
      "text": "but the real benefit here is that we can",
      "start": 688.22,
      "duration": 4.3
    },
    {
      "text": "use a weight in front of our promises",
      "start": 690.81,
      "duration": 3.78
    },
    {
      "text": "and have them resolve to an actual",
      "start": 692.52,
      "duration": 5.07
    },
    {
      "text": "variable value so instead of using those",
      "start": 694.59,
      "duration": 4.92
    },
    {
      "text": "then callbacks we can just say Const",
      "start": 697.59,
      "duration": 4.56
    },
    {
      "text": "first equals await random and do the",
      "start": 699.51,
      "duration": 3.99
    },
    {
      "text": "same thing for the second and third",
      "start": 702.15,
      "duration": 4.5
    },
    {
      "text": "number and now it's much easier to read",
      "start": 703.5,
      "duration": 4.71
    },
    {
      "text": "and understand this code because we can",
      "start": 706.65,
      "duration": 3.27
    },
    {
      "text": "just go line by line and see that we're",
      "start": 708.21,
      "duration": 3.24
    },
    {
      "text": "waiting one number awaiting another",
      "start": 709.92,
      "duration": 2.79
    },
    {
      "text": "number and so on",
      "start": 711.45,
      "duration": 3.57
    },
    {
      "text": "a sync wait is one of the most awesome",
      "start": 712.71,
      "duration": 4.41
    },
    {
      "text": "things to ever happen to JavaScript and",
      "start": 715.02,
      "duration": 4.41
    },
    {
      "text": "it really deserves its own video right",
      "start": 717.12,
      "duration": 3.75
    },
    {
      "text": "now we're out of time but in the future",
      "start": 719.43,
      "duration": 2.4
    },
    {
      "text": "I'll show you some of the cool things",
      "start": 720.87,
      "duration": 2.49
    },
    {
      "text": "you can do with it like use it in",
      "start": 721.83,
      "duration": 3.63
    },
    {
      "text": "conditional statements or use it in for",
      "start": 723.36,
      "duration": 4.05
    },
    {
      "text": "loops and things like that I'm gonna go",
      "start": 725.46,
      "duration": 3.36
    },
    {
      "text": "ahead and wrap things up there if this",
      "start": 727.41,
      "duration": 2.73
    },
    {
      "text": "video helped you please like and",
      "start": 728.82,
      "duration": 3.03
    },
    {
      "text": "subscribe and make sure to check out the",
      "start": 730.14,
      "duration": 3.21
    },
    {
      "text": "livestream next week to see if you want",
      "start": 731.85,
      "duration": 3.24
    },
    {
      "text": "some free swag and if you're serious",
      "start": 733.35,
      "duration": 3.42
    },
    {
      "text": "about building apps consider becoming a",
      "start": 735.09,
      "duration": 3.78
    },
    {
      "text": "pro member at angular firebase comm",
      "start": 736.77,
      "duration": 3.69
    },
    {
      "text": "you'll get all kinds of exclusive",
      "start": 738.87,
      "duration": 3.45
    },
    {
      "text": "content designed to help you build and",
      "start": 740.46,
      "duration": 4.05
    },
    {
      "text": "ship your app faster thanks for watching",
      "start": 742.32,
      "duration": 5.39
    },
    {
      "text": "and I'll talk to you soon",
      "start": 744.51,
      "duration": 3.2
    }
  ],
  "main_samples": [
    {
      "timestamp": 216.9275,
      "duration": 30,
      "text": "argument so there's actually another way we can do this which is just as good this time we pass in the animal object like we did originally but then we set up a variable that has the names of the properties in that object set equal to the object and now we can use those properties like variables throughout the function and this tends to be the better way to go if you have multiple objects 2d structure and a single function the next thing we'll look at is template literals which we've already been using in the code but there's more to talk about here when I first started programming about 10 years ago jQuery was the cool thing in JavaScript",
      "entries": [
        {
          "text": "argument so there's actually another way",
          "start": 217.5,
          "duration": 3.299
        },
        {
          "text": "we can do this which is just as good",
          "start": 219.12,
          "duration": 3.869
        },
        {
          "text": "this time we pass in the animal object",
          "start": 220.799,
          "duration": 4.051
        },
        {
          "text": "like we did originally but then we set",
          "start": 222.989,
          "duration": 3.72
        },
        {
          "text": "up a variable that has the names of the",
          "start": 224.85,
          "duration": 4.05
        },
        {
          "text": "properties in that object set equal to",
          "start": 226.709,
          "duration": 4.081
        },
        {
          "text": "the object and now we can use those",
          "start": 228.9,
          "duration": 3.72
        },
        {
          "text": "properties like variables throughout the",
          "start": 230.79,
          "duration": 3.63
        },
        {
          "text": "function and this tends to be the better",
          "start": 232.62,
          "duration": 3.63
        },
        {
          "text": "way to go if you have multiple objects",
          "start": 234.42,
          "duration": 4.409
        },
        {
          "text": "2d structure and a single function the",
          "start": 236.25,
          "duration": 4.049
        },
        {
          "text": "next thing we'll look at is template",
          "start": 238.829,
          "duration": 2.88
        },
        {
          "text": "literals which we've already been using",
          "start": 240.299,
          "duration": 3.361
        },
        {
          "text": "in the code but there's more to talk",
          "start": 241.709,
          "duration": 3.511
        },
        {
          "text": "about here when I first started",
          "start": 243.66,
          "duration": 2.82
        },
        {
          "text": "programming about 10 years ago",
          "start": 245.22,
          "duration": 2.97
        },
        {
          "text": "jQuery was the cool thing in JavaScript",
          "start": 246.48,
          "duration": 4.319
        }
      ]
    },
    {
      "timestamp": 373.855,
      "duration": 30,
      "text": "imagine we have one object for a Pokemon and the other one for the stats that define its various attributes let's say we want to assign the properties from the stats object to the Pikachu object one way to do that is to just redefine them one by one on the original Pikachu object for one this is just really ugly and verbose but we're also mutating the original object when we most likely want to create a new immutable object because let's say that our Pokemon levels up over time we want to represent each level up as its own object we could",
      "entries": [
        {
          "text": "imagine we have one object for a Pokemon",
          "start": 373.95,
          "duration": 3.93
        },
        {
          "text": "and the other one for the stats that",
          "start": 375.99,
          "duration": 4.47
        },
        {
          "text": "define its various attributes let's say",
          "start": 377.88,
          "duration": 4.08
        },
        {
          "text": "we want to assign the properties from",
          "start": 380.46,
          "duration": 3.84
        },
        {
          "text": "the stats object to the Pikachu object",
          "start": 381.96,
          "duration": 4.98
        },
        {
          "text": "one way to do that is to just redefine",
          "start": 384.3,
          "duration": 4.92
        },
        {
          "text": "them one by one on the original Pikachu",
          "start": 386.94,
          "duration": 4.89
        },
        {
          "text": "object for one this is just really ugly",
          "start": 389.22,
          "duration": 5.07
        },
        {
          "text": "and verbose but we're also mutating the",
          "start": 391.83,
          "duration": 4.74
        },
        {
          "text": "original object when we most likely want",
          "start": 394.29,
          "duration": 5.37
        },
        {
          "text": "to create a new immutable object because",
          "start": 396.57,
          "duration": 4.33
        },
        {
          "text": "let's say that our Pokemon",
          "start": 399.66,
          "duration": 3.25
        },
        {
          "text": "levels up over time we want to represent",
          "start": 400.9,
          "duration": 5.13
        },
        {
          "text": "each level up as its own object we could",
          "start": 402.91,
          "duration": 5.16
        }
      ]
    },
    {
      "timestamp": 530.7825,
      "duration": 30,
      "text": "JavaScript but while we're in the loop we can start computing values for the total we will just do plus equals with the order total then to create a new array with the tax added to it we'll go ahead and take the order amount and multiply it by 1.1 to add 10% tax then if we have order values that are greater than 100 we'll go ahead and add those to the high value order array this code is a very ugly and B it's mutating values that might make our code a little more unpredictable luckily we",
      "entries": [
        {
          "text": "JavaScript but while we're in the loop",
          "start": 532.12,
          "duration": 2.73
        },
        {
          "text": "we can start computing",
          "start": 533.92,
          "duration": 3.089
        },
        {
          "text": "values for the total we will just do",
          "start": 534.85,
          "duration": 4.95
        },
        {
          "text": "plus equals with the order total then to",
          "start": 537.009,
          "duration": 5.101
        },
        {
          "text": "create a new array with the tax added to",
          "start": 539.8,
          "duration": 4.019
        },
        {
          "text": "it we'll go ahead and take the order",
          "start": 542.11,
          "duration": 4.469
        },
        {
          "text": "amount and multiply it by 1.1 to add 10%",
          "start": 543.819,
          "duration": 5.401
        },
        {
          "text": "tax then if we have order values that",
          "start": 546.579,
          "duration": 4.531
        },
        {
          "text": "are greater than 100 we'll go ahead and",
          "start": 549.22,
          "duration": 4.169
        },
        {
          "text": "add those to the high value order array",
          "start": 551.11,
          "duration": 5.52
        },
        {
          "text": "this code is a very ugly and B it's",
          "start": 553.389,
          "duration": 5.13
        },
        {
          "text": "mutating values that might make our code",
          "start": 556.63,
          "duration": 4.319
        },
        {
          "text": "a little more unpredictable luckily we",
          "start": 558.519,
          "duration": 3.81
        }
      ]
    }
  ],
  "transcript_length": 374,
  "fetched_at": "2025-07-27T12:36:11.847840"
}